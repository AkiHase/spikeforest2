function kilosort2_master(dat_file, output_folder, params)

if isstr(params)
    params = jsondecode(fileread(params));
end;

% set file path
fpath = output_folder

% create channel map file
% run(fullfile('{channel_path}'));
kilosort2_channelmap( ...
    'chanMap.mat', ...
    struct( ...
        'nchan', params.nchan, ...
        'xcoords', params.xcoords, ...
        'ycoords', params.ycoords, ...
        'kcoords', params.kcoords, ...
        'sample_rate', params.sample_rate ...
    ) ...
)

% Run the configuration file, it builds the structure of options (ops)
% run(fullfile('{config_path}'))
ops = kilosort2_config(struct( ...
    'nchan', params.nchan, ...
    'sample_rate', params.sample_rate, ...
    'dat_file', dat_file, ...
    'freq_min', params.freq_min, ...
    'projection_threshold', params.projection_threshold, ...
    'minFR', params.minFR, ...
    'sigmaMask', params.sigmaMask, ...
    'preclust_threshold', params.preclust_threshold, ...
    'kilo_thresh', params.kilo_thresh, ...
    'use_car', params.use_car, ...
    'nPCs', params.nPCs, ...
    'chanmap_file', 'chanMap.mat' ...
))

ops.trange = [0 Inf]; % time range to sort

% preprocess data to create temp_wh.dat
rez = preprocessDataSub(ops);

% time-reordering as a function of drift
rez = clusterSingleBatches(rez);

% main tracking and template matching algorithm
rez = learnAndSolve8b(rez);

% final merges
rez = find_merges(rez, 1);

% final splits by SVD
rez = splitAllClusters(rez, 1);

% final splits by amplitudes
rez = splitAllClusters(rez, 0);

% decide on cutoff
rez = set_cutoff(rez);

fprintf('found %d good units \n', sum(rez.good>0))

fprintf('Saving results to Phy  \n')
rezToPhy(rez, fullfile(fpath));
